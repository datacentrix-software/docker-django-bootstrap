# ARGs should have default values
ARG PYTHON_VERSION=3.11-bullseye
FROM ghcr.io/praekeltfoundation/python-base-nw:${PYTHON_VERSION}

# Create user and group first
RUN addgroup --system --gid 107 django \
    && adduser --system --uid 104 --ingroup django django \
    && mkdir /etc/gunicorn

# Install necessary libraries and tools like wget, gnupg, geos
RUN apt-get update \
    && apt-get install -y --no-install-recommends wget gnupg lsb-release libgeos-dev apt-transport-https ca-certificates curl \
    && rm -rf /var/lib/apt/lists/*

# Hashicorp repository setup
RUN wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list \
    && apt-get update \
    && apt-get install -y terraform

# Install PostgreSQL library
RUN apt-get update && apt-get install -y libpq5

# Set Nginx version and GPG key as environment variables
ENV NGINX_VERSION=1.20.2
ENV NGINX_GPG_KEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62

# Install Nginx with GPG verification
RUN set -ex; \
    fetchDeps="wget dirmngr gnupg1"; \
    apt-get update && apt-get install -y --no-install-recommends $fetchDeps; \
    wget -O nginx_signing.key https://nginx.org/keys/nginx_signing.key; \
    key_fingerprint=$(gpg --batch --with-fingerprint --with-colons nginx_signing.key | awk -F: '/^fpr:/ { print $10 }'); \
    if [ "$key_fingerprint" != "$NGINX_GPG_KEY" ]; then \
        echo "Key fingerprint doesn't match!"; \
        exit 1; \
    fi; \
    apt-key add nginx_signing.key; \
    codename=$(lsb_release -sc); \
    echo "deb http://nginx.org/packages/debian/ $codename nginx" > /etc/apt/sources.list.d/nginx.list; \
    rm nginx_signing.key; \
    apt-get update && apt-get install -y "nginx=${NGINX_VERSION}-1~$codename"; \
    apt-get purge -y $fetchDeps; \
    apt-get autoremove -y; \
    rm -rf /var/lib/apt/lists/*; \
    rm /etc/nginx/conf.d/default.conf; \
    adduser nginx django

# Copy Nginx configuration and ensure all necessary directories or settings are in place
COPY nginx/ /etc/nginx/

# Ensure pip and setuptools are up-to-date
RUN pip install -U pip setuptools

# Install Gunicorn
COPY gunicorn/ /etc/gunicorn/
RUN pip install -r /etc/gunicorn/requirements.txt

# Expose application port and set up work directory
EXPOSE 8000
WORKDIR /app

# Copy and set up entrypoint scripts
COPY django-entrypoint.sh celery-entrypoint.sh /scripts/
ENTRYPOINT ["tini", "--", "/scripts/django-entrypoint.sh"]
CMD []
